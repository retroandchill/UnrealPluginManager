/*
 * Unreal Plugin Manager API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using UnrealPluginManager.Core.Model.Users;
using UnrealPluginManager.WebClient.Client;

namespace UnrealPluginManager.WebClient.Api {


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IUsersApiSync : IApiAccessor {

    #region Synchronous Operations

    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <returns>string</returns>
    string CreateApiKey(Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <returns>ApiResponse of string</returns>
    ApiResponse<string>
        CreateApiKeyWithHttpInfo(Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?));

    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>UserOverview</returns>
    UserOverview GetActiveUser();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of UserOverview</returns>
    ApiResponse<UserOverview> GetActiveUserWithHttpInfo();

    #endregion Synchronous Operations

  }

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IUsersApiAsync : IApiAccessor {

    #region Asynchronous Operations

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of string</returns>
    Task<string> CreateApiKeyAsync(Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?),
                                   CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<ApiResponse<string>> CreateApiKeyWithHttpInfoAsync(Guid userId,
                                                            ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?),
                                                            CancellationToken cancellationToken =
                                                                default(CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UserOverview</returns>
    Task<UserOverview> GetActiveUserAsync(CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UserOverview)</returns>
    Task<ApiResponse<UserOverview>> GetActiveUserWithHttpInfoAsync(
        CancellationToken cancellationToken = default(CancellationToken));

    #endregion Asynchronous Operations

  }

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IUsersApi : IUsersApiSync, IUsersApiAsync {

  }

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class UsersApi : IDisposable, IUsersApi {
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <returns></returns>
    public UsersApi() : this((string) null) {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    public UsersApi(string basePath) {
      this.Configuration = WebClient.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          new Configuration {
              BasePath = basePath
          }
      );
      this.ApiClient = new ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = WebClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    public UsersApi(Configuration configuration) {
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Configuration = WebClient.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = WebClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public UsersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string) null, handler) {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public UsersApi(HttpClient client, string basePath, HttpClientHandler handler = null) {
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = WebClient.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          new Configuration {
              BasePath = basePath
          }
      );
      this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = WebClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class using Configuration object.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public UsersApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null) {
      if (configuration == null) throw new ArgumentNullException("configuration");
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = WebClient.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = WebClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UsersApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public UsersApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration) {
      if (client == null) throw new ArgumentNullException("client");
      if (asyncClient == null) throw new ArgumentNullException("asyncClient");
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Client = client;
      this.AsynchronousClient = asyncClient;
      this.Configuration = configuration;
      this.ExceptionFactory = WebClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Disposes resources if they were created by us
    /// </summary>
    public void Dispose() {
      this.ApiClient?.Dispose();
    }

    /// <summary>
    /// Holds the ApiClient if created
    /// </summary>
    public ApiClient ApiClient { get; set; } = null;

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() {
      return this.Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory {
      get {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1) {
          throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
      }
      set { _exceptionFactory = value; }
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <returns>string</returns>
    public string CreateApiKey(Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?)) {
      ApiResponse<string> localVarResponse = CreateApiKeyWithHttpInfo(userId, apiKeyOverview);
      return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <returns>ApiResponse of string</returns>
    public ApiResponse<string> CreateApiKeyWithHttpInfo(Guid userId,
                                                        ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?)) {
      RequestOptions localVarRequestOptions = new RequestOptions();

      string[] _contentTypes = new string[] {
          "application/json", "text/json", "application/*+json"
      };

      // to determine the Accept header
      string[] _accepts = new string[] {
          "text/markdown", "text/plain", "application/json", "text/json"
      };

      var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userId", ClientUtils.ParameterToString(userId)); // path parameter
      localVarRequestOptions.Data = apiKeyOverview;

      // authentication (oauth2) required
      // oauth required
      if (!string.IsNullOrEmpty(this.Configuration.AccessToken) &&
          !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")) {
        localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
      }

      // make the HTTP request
      var localVarResponse =
          this.Client.Post<string>("/users/{userId}/api-keys", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null) {
        Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of string</returns>
    public async Task<string> CreateApiKeyAsync(Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?),
                                                CancellationToken cancellationToken = default(CancellationToken)) {
      ApiResponse<string> localVarResponse =
          await CreateApiKeyWithHttpInfoAsync(userId, apiKeyOverview, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"></param>
    /// <param name="apiKeyOverview"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<ApiResponse<string>> CreateApiKeyWithHttpInfoAsync(
        Guid userId, ApiKeyOverview? apiKeyOverview = default(ApiKeyOverview?),
        CancellationToken cancellationToken = default(CancellationToken)) {

      RequestOptions localVarRequestOptions = new RequestOptions();

      string[] _contentTypes = new string[] {
          "application/json", "text/json", "application/*+json"
      };

      // to determine the Accept header
      string[] _accepts = new string[] {
          "text/markdown", "text/plain", "application/json", "text/json"
      };


      var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userId", ClientUtils.ParameterToString(userId)); // path parameter
      localVarRequestOptions.Data = apiKeyOverview;

      // authentication (oauth2) required
      // oauth required
      if (!string.IsNullOrEmpty(this.Configuration.AccessToken) &&
          !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")) {
        localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
      }

      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient
          .PostAsync<string>("/users/{userId}/api-keys", localVarRequestOptions, this.Configuration, cancellationToken)
          .ConfigureAwait(false);

      if (this.ExceptionFactory != null) {
        Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>UserOverview</returns>
    public UserOverview GetActiveUser() {
      ApiResponse<UserOverview> localVarResponse = GetActiveUserWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of UserOverview</returns>
    public ApiResponse<UserOverview> GetActiveUserWithHttpInfo() {
      RequestOptions localVarRequestOptions = new RequestOptions();

      string[] _contentTypes = new string[] {
      };

      // to determine the Accept header
      string[] _accepts = new string[] {
          "text/plain", "application/json", "text/json"
      };

      var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (oauth2) required
      // oauth required
      if (!string.IsNullOrEmpty(this.Configuration.AccessToken) &&
          !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")) {
        localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
      }

      // make the HTTP request
      var localVarResponse = this.Client.Get<UserOverview>("/users/active", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null) {
        Exception _exception = this.ExceptionFactory("GetActiveUser", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UserOverview</returns>
    public async Task<UserOverview>
        GetActiveUserAsync(CancellationToken cancellationToken = default(CancellationToken)) {
      ApiResponse<UserOverview> localVarResponse =
          await GetActiveUserWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UserOverview)</returns>
    public async Task<ApiResponse<UserOverview>> GetActiveUserWithHttpInfoAsync(
        CancellationToken cancellationToken = default(CancellationToken)) {

      RequestOptions localVarRequestOptions = new RequestOptions();

      string[] _contentTypes = new string[] {
      };

      // to determine the Accept header
      string[] _accepts = new string[] {
          "text/plain", "application/json", "text/json"
      };


      var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (oauth2) required
      // oauth required
      if (!string.IsNullOrEmpty(this.Configuration.AccessToken) &&
          !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")) {
        localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
      }

      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient
          .GetAsync<UserOverview>("/users/active", localVarRequestOptions, this.Configuration, cancellationToken)
          .ConfigureAwait(false);

      if (this.ExceptionFactory != null) {
        Exception _exception = this.ExceptionFactory("GetActiveUser", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

  }
}
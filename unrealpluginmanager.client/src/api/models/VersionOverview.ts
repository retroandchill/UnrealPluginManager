/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {SourceLocation} from './SourceLocation';
import {SourceLocationFromJSON, SourceLocationToJSON,} from './SourceLocation';
import type {ResourceInfo} from './ResourceInfo';
import {ResourceInfoFromJSON, ResourceInfoToJSON,} from './ResourceInfo';

/**
 * Represents a specific version of a plugin, identified by a unique ID and version number.
 * @export
 * @interface VersionOverview
 */
export interface VersionOverview {
    /**
     * Gets or sets the unique identifier for this instance.
     * @type {string}
     * @memberof VersionOverview
     */
    id: string;
    /**
     * Gets or sets the semantic version of the plugin, representing its specific version details.
     * @type {string}
     * @memberof VersionOverview
     */
    version: string;
    /**
     *
     * @type {SourceLocation}
     * @memberof VersionOverview
     */
    source?: SourceLocation;
  /**
   * 
     * @type {ResourceInfo}
     * @memberof VersionOverview
     */
    icon?: ResourceInfo;
}

/**
 * Check if a given object implements the VersionOverview interface.
 */
export function instanceOfVersionOverview(value: object): value is VersionOverview {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function VersionOverviewFromJSON(json: any): VersionOverview {
    return VersionOverviewFromJSONTyped(json, false);
}

export function VersionOverviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): VersionOverview {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': json['version'],
      'source': json['source'] == null ? undefined : SourceLocationFromJSON(json['source']),
        'icon': json['icon'] == null ? undefined : ResourceInfoFromJSON(json['icon']),
    };
}

export function VersionOverviewToJSON(json: any): VersionOverview {
    return VersionOverviewToJSONTyped(json, false);
}

export function VersionOverviewToJSONTyped(value?: VersionOverview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'version': value['version'],
      'source': SourceLocationToJSON(value['source']),
        'icon': ResourceInfoToJSON(value['icon']),
    };
}


/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResourceInfo } from './ResourceInfo';
import {
    ResourceInfoFromJSON,
    ResourceInfoFromJSONTyped,
    ResourceInfoToJSON,
    ResourceInfoToJSONTyped,
} from './ResourceInfo';
import type { BinariesOverview } from './BinariesOverview';
import {
    BinariesOverviewFromJSON,
    BinariesOverviewFromJSONTyped,
    BinariesOverviewToJSON,
    BinariesOverviewToJSONTyped,
} from './BinariesOverview';
import type { DependencyOverview } from './DependencyOverview';
import {
    DependencyOverviewFromJSON,
    DependencyOverviewFromJSONTyped,
    DependencyOverviewToJSON,
    DependencyOverviewToJSONTyped,
} from './DependencyOverview';

/**
 * Represents detailed information about a specific plugin version,
 * including its version number, unique identifier, and list of associated binaries.
 * @export
 * @interface VersionDetails
 */
export interface VersionDetails {
    /**
     * Gets or sets the unique identifier for this instance.
     * @type {string}
     * @memberof VersionDetails
     */
    id: string;
    /**
     * Gets or sets the semantic version of the plugin, representing its specific version details.
     * @type {string}
     * @memberof VersionDetails
     */
    version: string;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof VersionDetails
     */
    icon?: ResourceInfo;
    /**
     * A collection of dependency overviews associated with a specific version of a plugin.
     * Each dependency overview provides information about dependent plugins, including their metadata, version requirements, and optionality.
     * @type {Array<DependencyOverview>}
     * @memberof VersionDetails
     */
    dependencies: Array<DependencyOverview>;
    /**
     * A collection of binary overviews associated with a specific version of a plugin.
     * Each binary overview provides details about the platform and engine version it supports.
     * @type {Array<BinariesOverview>}
     * @memberof VersionDetails
     */
    binaries: Array<BinariesOverview>;
}

/**
 * Check if a given object implements the VersionDetails interface.
 */
export function instanceOfVersionDetails(value: object): value is VersionDetails {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
    if (!('binaries' in value) || value['binaries'] === undefined) return false;
    return true;
}

export function VersionDetailsFromJSON(json: any): VersionDetails {
    return VersionDetailsFromJSONTyped(json, false);
}

export function VersionDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): VersionDetails {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': json['version'],
        'icon': json['icon'] == null ? undefined : ResourceInfoFromJSON(json['icon']),
        'dependencies': ((json['dependencies'] as Array<any>).map(DependencyOverviewFromJSON)),
        'binaries': ((json['binaries'] as Array<any>).map(BinariesOverviewFromJSON)),
    };
}

export function VersionDetailsToJSON(json: any): VersionDetails {
    return VersionDetailsToJSONTyped(json, false);
}

export function VersionDetailsToJSONTyped(value?: VersionDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'version': value['version'],
        'icon': ResourceInfoToJSON(value['icon']),
        'dependencies': ((value['dependencies'] as Array<any>).map(DependencyOverviewToJSON)),
        'binaries': ((value['binaries'] as Array<any>).map(BinariesOverviewToJSON)),
    };
}


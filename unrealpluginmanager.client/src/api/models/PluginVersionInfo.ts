/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {mapValues} from '../runtime';
import type {PluginDependency} from './PluginDependency';
import {
  PluginDependencyFromJSON,
  PluginDependencyFromJSONTyped,
  PluginDependencyToJSON,
  PluginDependencyToJSONTyped,
} from './PluginDependency';

/**
 * Represents detailed information about a specific version of a plugin.
 * @export
 * @interface PluginVersionInfo
 */
export interface PluginVersionInfo {
  /**
   * Gets or sets the unique identifier for a plugin.
   * @type {number}
   * @memberof PluginVersionInfo
   */
  pluginId: number;
  /**
   * Gets the name of the plugin associated with the current version.
   * @type {string}
   * @memberof PluginVersionInfo
   */
  name: string | null;
  /**
   * Gets or sets the user-friendly name of the plugin associated with the current version.
   * @type {string}
   * @memberof PluginVersionInfo
   */
  friendlyName?: string | null;
  /**
   * Gets or sets the unique identifier for the plugin version.
   * @type {number}
   * @memberof PluginVersionInfo
   */
  versionId: number;
  /**
   * Gets the semantic version of the plugin.
   * @type {string}
   * @memberof PluginVersionInfo
   */
  version: string | null;
  /**
   * Gets or sets the list of dependencies for the current plugin version.
   * @type {Array<PluginDependency>}
   * @memberof PluginVersionInfo
   */
  dependencies: Array<PluginDependency> | null;
}

/**
 * Check if a given object implements the PluginVersionInfo interface.
 */
export function instanceOfPluginVersionInfo(value: object): value is PluginVersionInfo {
  if (!('pluginId' in value) || value['pluginId'] === undefined) return false;
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('versionId' in value) || value['versionId'] === undefined) return false;
  if (!('version' in value) || value['version'] === undefined) return false;
  if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
  return true;
}

export function PluginVersionInfoFromJSON(json: any): PluginVersionInfo {
  return PluginVersionInfoFromJSONTyped(json, false);
}

export function PluginVersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginVersionInfo {
  if (json == null) {
    return json;
  }
  return {

    'pluginId': json['pluginId'],
    'name': json['name'],
    'friendlyName': json['friendlyName'] == null ? undefined : json['friendlyName'],
    'versionId': json['versionId'],
    'version': json['version'],
    'dependencies': (json['dependencies'] == null ? null : (json['dependencies'] as Array<any>).map(PluginDependencyFromJSON)),
  };
}

export function PluginVersionInfoToJSON(json: any): PluginVersionInfo {
  return PluginVersionInfoToJSONTyped(json, false);
}

export function PluginVersionInfoToJSONTyped(value?: PluginVersionInfo | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {

    'pluginId': value['pluginId'],
    'name': value['name'],
    'friendlyName': value['friendlyName'],
    'versionId': value['versionId'],
    'version': value['version'],
    'dependencies': (value['dependencies'] == null ? null : (value['dependencies'] as Array<any>).map(PluginDependencyToJSON)),
  };
}


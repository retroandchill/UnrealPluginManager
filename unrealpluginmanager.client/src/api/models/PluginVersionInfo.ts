/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {SourceLocation} from './SourceLocation';
import {SourceLocationFromJSON, SourceLocationToJSON,} from './SourceLocation';
import type {ResourceInfo} from './ResourceInfo';
import {ResourceInfoFromJSON, ResourceInfoToJSON,} from './ResourceInfo';
import type {PluginDependency} from './PluginDependency';
import {PluginDependencyFromJSON, PluginDependencyToJSON,} from './PluginDependency';

/**
 * Represents detailed information about a specific version of a plugin.
 * @export
 * @interface PluginVersionInfo
 */
export interface PluginVersionInfo {
    /**
     * Gets or sets the unique identifier for a plugin.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    pluginId: string;
    /**
     * Gets the name of the plugin associated with the current version.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    name: string;
    /**
     * Gets or sets the unique identifier for the plugin version.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    versionId: string;
  /**
   * Gets the semantic version of the plugin.
     * @type {string}
     * @memberof PluginVersionInfo
     */
  version: string;
    /**
     * Gets or sets a brief explanation or summary of the plugin version.
     * This provides additional context or details about the plugin functionality or purpose.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    description?: string | null;
  /**
     * Gets or sets the name of the author associated with the plugin.
     * @type {string}
     * @memberof PluginVersionInfo
     */
  author?: string | null;
    /**
     * Gets or sets the license information associated with the plugin.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    license?: string | null;
    /**
     * Gets or sets the URL of the homepage associated with the plugin.
     * @type {string}
     * @memberof PluginVersionInfo
     */
    homepage?: string | null;
    /**
     * 
     * @type {SourceLocation}
     * @memberof PluginVersionInfo
     */
    source?: SourceLocation;
  /**
   * Gets or sets the collection of patch versions associated with the plugin.
   * @type {Array<string>}
   * @memberof PluginVersionInfo
   */
  patches?: Array<string>;
  /**
   * 
     * @type {ResourceInfo}
     * @memberof PluginVersionInfo
     */
    icon?: ResourceInfo;
    /**
     * Gets or sets the list of dependencies for the current plugin version.
     * @type {Array<PluginDependency>}
     * @memberof PluginVersionInfo
     */
    dependencies: Array<PluginDependency>;
}

/**
 * Check if a given object implements the PluginVersionInfo interface.
 */
export function instanceOfPluginVersionInfo(value: object): value is PluginVersionInfo {
    if (!('pluginId' in value) || value['pluginId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('versionId' in value) || value['versionId'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
    return true;
}

export function PluginVersionInfoFromJSON(json: any): PluginVersionInfo {
    return PluginVersionInfoFromJSONTyped(json, false);
}

export function PluginVersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginVersionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'pluginId': json['pluginId'],
        'name': json['name'],
        'versionId': json['versionId'],
        'version': json['version'],
      'description': json['description'] == null ? undefined : json['description'],
      'author': json['author'] == null ? undefined : json['author'],
      'license': json['license'] == null ? undefined : json['license'],
      'homepage': json['homepage'] == null ? undefined : json['homepage'],
      'source': json['source'] == null ? undefined : SourceLocationFromJSON(json['source']),
      'patches': json['patches'] == null ? undefined : json['patches'],
        'icon': json['icon'] == null ? undefined : ResourceInfoFromJSON(json['icon']),
        'dependencies': ((json['dependencies'] as Array<any>).map(PluginDependencyFromJSON)),
    };
}

export function PluginVersionInfoToJSON(json: any): PluginVersionInfo {
    return PluginVersionInfoToJSONTyped(json, false);
}

export function PluginVersionInfoToJSONTyped(value?: PluginVersionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pluginId': value['pluginId'],
        'name': value['name'],
        'versionId': value['versionId'],
        'version': value['version'],
      'description': value['description'],
      'author': value['author'],
      'license': value['license'],
      'homepage': value['homepage'],
      'source': SourceLocationToJSON(value['source']),
      'patches': value['patches'],
        'icon': ResourceInfoToJSON(value['icon']),
        'dependencies': ((value['dependencies'] as Array<any>).map(PluginDependencyToJSON)),
    };
}


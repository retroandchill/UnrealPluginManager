/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {SourceLocation} from './SourceLocation';
import {SourceLocationFromJSON, SourceLocationToJSON,} from './SourceLocation';
import type {PluginDependencyManifest} from './PluginDependencyManifest';
import {PluginDependencyManifestFromJSON, PluginDependencyManifestToJSON,} from './PluginDependencyManifest';

/**
 * Represents a manifest for a plugin, containing metadata and configuration needed to identify
 * and manage the plugin within the Unreal Plugin Manager.
 * @export
 * @interface PluginManifest
 */
export interface PluginManifest {
  /**
   * Gets the name of the plugin as defined in its manifest. This property is
   * required and serves as a unique identifier for the plugin within the Unreal Plugin Manager.
   * @type {string}
   * @memberof PluginManifest
   */
  name: string;
  /**
   * Gets the semantic version of the plugin as defined in its manifest.
   * This property specifies the version of the plugin for identification, compatibility, and dependency resolution purposes.
   * @type {string}
   * @memberof PluginManifest
   */
  version: string;
  /**
   * Gets or sets the author of the plugin. This property is optional and provides
   * information about the individual or organization responsible for creating
   * or maintaining the plugin.
   * @type {string}
   * @memberof PluginManifest
   */
  author?: string | null;
  /**
   * Provides a detailed description of the plugin. This property is optional and may include
   * any relevant information about the plugin, such as its purpose, features, or any additional
   * context needed for users or developers.
   * @type {string}
   * @memberof PluginManifest
   */
  description?: string | null;
  /**
   * Gets or sets the license associated with the plugin. This property provides information
   * about the licensing terms under which the plugin is distributed.
   * @type {string}
   * @memberof PluginManifest
   */
  license?: string | null;
  /**
   * Gets the homepage URL of the plugin. This property provides a link to the plugin's
   * main page or website containing additional information, updates, or documentation.
   * @type {string}
   * @memberof PluginManifest
   */
  homepage?: string | null;
  /**
   *
   * @type {SourceLocation}
   * @memberof PluginManifest
   */
  source: SourceLocation;
  /**
   * Gets a list of patch file names associated with the plugin.
   * These patches represent modifications or updates that can be applied to the plugin files.
   * Each entry in this list corresponds to a patch expected to be uploaded and managed.
   * @type {Array<string>}
   * @memberof PluginManifest
   */
  patches?: Array<string>;
  /**
   * Gets the list of dependencies required by the plugin. Each dependency is described
   * by its name, version range, and optional repository source from which it can be retrieved.
   * This property ensures that all necessary plugins or components are available and aligned
   * with the plugin's requirements, allowing proper functionality within the Unreal Plugin Manager.
   * @type {Array<PluginDependencyManifest>}
   * @memberof PluginManifest
   */
  dependencies: Array<PluginDependencyManifest>;
}

/**
 * Check if a given object implements the PluginManifest interface.
 */
export function instanceOfPluginManifest(value: object): value is PluginManifest {
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('version' in value) || value['version'] === undefined) return false;
  if (!('source' in value) || value['source'] === undefined) return false;
  if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
  return true;
}

export function PluginManifestFromJSON(json: any): PluginManifest {
  return PluginManifestFromJSONTyped(json, false);
}

export function PluginManifestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginManifest {
  if (json == null) {
    return json;
  }
  return {

    'name': json['name'],
    'version': json['version'],
    'author': json['author'] == null ? undefined : json['author'],
    'description': json['description'] == null ? undefined : json['description'],
    'license': json['license'] == null ? undefined : json['license'],
    'homepage': json['homepage'] == null ? undefined : json['homepage'],
    'source': SourceLocationFromJSON(json['source']),
    'patches': json['patches'] == null ? undefined : json['patches'],
    'dependencies': ((json['dependencies'] as Array<any>).map(PluginDependencyManifestFromJSON)),
  };
}

export function PluginManifestToJSON(json: any): PluginManifest {
  return PluginManifestToJSONTyped(json, false);
}

export function PluginManifestToJSONTyped(value?: PluginManifest | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {

    'name': value['name'],
    'version': value['version'],
    'author': value['author'],
    'description': value['description'],
    'license': value['license'],
    'homepage': value['homepage'],
    'source': SourceLocationToJSON(value['source']),
    'patches': value['patches'],
    'dependencies': ((value['dependencies'] as Array<any>).map(PluginDependencyManifestToJSON)),
  };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PluginVersionInfo } from './PluginVersionInfo';
import {
    PluginVersionInfoFromJSON,
    PluginVersionInfoFromJSONTyped,
    PluginVersionInfoToJSON,
    PluginVersionInfoToJSONTyped,
} from './PluginVersionInfo';

/**
 * Represents a manifest of plugin dependencies resolved by the dependency resolution process.
 * @export
 * @interface DependencyManifest
 */
export interface DependencyManifest {
    /**
     * A property that stores a collection of dependencies that have been successfully resolved
     * during the dependency resolution process.
     * @type {{ [key: string]: Array<PluginVersionInfo>; }}
     * @memberof DependencyManifest
     */
    foundDependencies?: { [key: string]: Array<PluginVersionInfo>; };
    /**
     * A property that holds a collection of dependencies that could not be resolved
     * during the dependency resolution process.
     * @type {Set<string>}
     * @memberof DependencyManifest
     */
    unresolvedDependencies?: Set<string>;
}

/**
 * Check if a given object implements the DependencyManifest interface.
 */
export function instanceOfDependencyManifest(value: object): value is DependencyManifest {
    return true;
}

export function DependencyManifestFromJSON(json: any): DependencyManifest {
    return DependencyManifestFromJSONTyped(json, false);
}

export function DependencyManifestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DependencyManifest {
    if (json == null) {
        return json;
    }
    return {
        
        'foundDependencies': json['foundDependencies'] == null ? undefined : json['foundDependencies'],
        'unresolvedDependencies': json['unresolvedDependencies'] == null ? undefined : new Set(json['unresolvedDependencies']),
    };
}

export function DependencyManifestToJSON(json: any): DependencyManifest {
    return DependencyManifestToJSONTyped(json, false);
}

export function DependencyManifestToJSONTyped(value?: DependencyManifest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'foundDependencies': value['foundDependencies'],
        'unresolvedDependencies': value['unresolvedDependencies'] == null ? undefined : Array.from(value['unresolvedDependencies'] as Set<any>),
    };
}


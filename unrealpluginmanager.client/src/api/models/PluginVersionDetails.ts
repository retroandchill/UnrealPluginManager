/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {ResourceInfo} from './ResourceInfo';
import {ResourceInfoFromJSON, ResourceInfoToJSON,} from './ResourceInfo';
import type {PluginDependency} from './PluginDependency';
import {PluginDependencyFromJSON, PluginDependencyToJSON,} from './PluginDependency';
import type {BinariesOverview} from './BinariesOverview';
import {BinariesOverviewFromJSON, BinariesOverviewToJSON,} from './BinariesOverview';

/**
 * Represents detailed information about a specific plugin version,
 * including a description and an overview of its binaries.
 * @export
 * @interface PluginVersionDetails
 */
export interface PluginVersionDetails {
    /**
     * Gets or sets the unique identifier for a plugin.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    pluginId: string;
    /**
     * Gets the name of the plugin associated with the current version.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    name: string;
    /**
     * Gets or sets the user-friendly name of the plugin associated with the current version.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    friendlyName?: string | null;
    /**
     * Gets or sets the name of the author associated with the plugin.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    authorName?: string | null;
    /**
     * Gets or sets the unique identifier for the plugin version.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    versionId: string;
    /**
     * Gets the semantic version of the plugin.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    version: string;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof PluginVersionDetails
     */
    icon?: ResourceInfo;
    /**
     * Gets or sets the list of dependencies for the current plugin version.
     * @type {Array<PluginDependency>}
     * @memberof PluginVersionDetails
     */
    dependencies: Array<PluginDependency>;
    /**
     * Gets or sets a brief explanation or summary of the plugin version.
     * This provides additional context or details about the plugin functionality or purpose.
     * @type {string}
     * @memberof PluginVersionDetails
     */
    description?: string | null;
    /**
     * Gets or sets the collection of binaries associated with the plugin version.
     * This provides details about the compiled binaries, such as their configurations or associated metadata.
     * @type {Array<BinariesOverview>}
     * @memberof PluginVersionDetails
     */
    binaries?: Array<BinariesOverview>;
}

/**
 * Check if a given object implements the PluginVersionDetails interface.
 */
export function instanceOfPluginVersionDetails(value: object): value is PluginVersionDetails {
    if (!('pluginId' in value) || value['pluginId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('versionId' in value) || value['versionId'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
    return true;
}

export function PluginVersionDetailsFromJSON(json: any): PluginVersionDetails {
    return PluginVersionDetailsFromJSONTyped(json, false);
}

export function PluginVersionDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginVersionDetails {
    if (json == null) {
        return json;
    }
    return {
        
        'pluginId': json['pluginId'],
        'name': json['name'],
        'friendlyName': json['friendlyName'] == null ? undefined : json['friendlyName'],
        'authorName': json['authorName'] == null ? undefined : json['authorName'],
        'versionId': json['versionId'],
        'version': json['version'],
        'icon': json['icon'] == null ? undefined : ResourceInfoFromJSON(json['icon']),
        'dependencies': ((json['dependencies'] as Array<any>).map(PluginDependencyFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'binaries': json['binaries'] == null ? undefined : ((json['binaries'] as Array<any>).map(BinariesOverviewFromJSON)),
    };
}

export function PluginVersionDetailsToJSON(json: any): PluginVersionDetails {
    return PluginVersionDetailsToJSONTyped(json, false);
}

export function PluginVersionDetailsToJSONTyped(value?: PluginVersionDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pluginId': value['pluginId'],
        'name': value['name'],
        'friendlyName': value['friendlyName'],
        'authorName': value['authorName'],
        'versionId': value['versionId'],
        'version': value['version'],
        'icon': ResourceInfoToJSON(value['icon']),
        'dependencies': ((value['dependencies'] as Array<any>).map(PluginDependencyToJSON)),
        'description': value['description'],
        'binaries': value['binaries'] == null ? undefined : ((value['binaries'] as Array<any>).map(BinariesOverviewToJSON)),
    };
}


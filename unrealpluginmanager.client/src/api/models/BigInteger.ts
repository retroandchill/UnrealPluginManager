/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface BigInteger
 */
export interface BigInteger {
  /**
   *
   * @type {boolean}
   * @memberof BigInteger
   */
  readonly isPowerOfTwo?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BigInteger
   */
  readonly isZero?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BigInteger
   */
  readonly isOne?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof BigInteger
   */
  readonly isEven?: boolean;
  /**
   *
   * @type {number}
   * @memberof BigInteger
   */
  readonly sign?: number;
}

/**
 * Check if a given object implements the BigInteger interface.
 */
export function instanceOfBigInteger(value: object): value is BigInteger {
  return true;
}

export function BigIntegerFromJSON(json: any): BigInteger {
  return BigIntegerFromJSONTyped(json, false);
}

export function BigIntegerFromJSONTyped(json: any, ignoreDiscriminator: boolean): BigInteger {
  if (json == null) {
    return json;
  }
  return {

    'isPowerOfTwo': json['isPowerOfTwo'] == null ? undefined : json['isPowerOfTwo'],
    'isZero': json['isZero'] == null ? undefined : json['isZero'],
    'isOne': json['isOne'] == null ? undefined : json['isOne'],
    'isEven': json['isEven'] == null ? undefined : json['isEven'],
    'sign': json['sign'] == null ? undefined : json['sign'],
  };
}

export function BigIntegerToJSON(json: any): BigInteger {
  return BigIntegerToJSONTyped(json, false);
}

export function BigIntegerToJSONTyped(value?: Omit<BigInteger, 'isPowerOfTwo' | 'isZero' | 'isOne' | 'isEven' | 'sign'> | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {};
}


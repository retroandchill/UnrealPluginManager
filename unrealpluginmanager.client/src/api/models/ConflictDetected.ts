/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Conflict } from './Conflict';
import {
    ConflictFromJSON,
    ConflictFromJSONTyped,
    ConflictToJSON,
    ConflictToJSONTyped,
} from './Conflict';

/**
 * Represents a conflict detected during the resolution process
 * when plugin dependencies have incompatible requirements.
 * @export
 * @interface ConflictDetected
 */
export interface ConflictDetected {
    /**
     * 
     * @type {Array<Conflict>}
     * @memberof ConflictDetected
     */
    conflicts?: Array<Conflict>;
    /**
     * 
     * @type {string}
     * @memberof ConflictDetected
     */
    type: string;
}

/**
 * Check if a given object implements the ConflictDetected interface.
 */
export function instanceOfConflictDetected(value: object): value is ConflictDetected {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ConflictDetectedFromJSON(json: any): ConflictDetected {
    return ConflictDetectedFromJSONTyped(json, false);
}

export function ConflictDetectedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConflictDetected {
    if (json == null) {
        return json;
    }
    return {
        
        'conflicts': json['conflicts'] == null ? undefined : ((json['conflicts'] as Array<any>).map(ConflictFromJSON)),
        'type': json['type'],
    };
}

export function ConflictDetectedToJSON(json: any): ConflictDetected {
    return ConflictDetectedToJSONTyped(json, false);
}

export function ConflictDetectedToJSONTyped(value?: ConflictDetected | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conflicts': value['conflicts'] == null ? undefined : ((value['conflicts'] as Array<any>).map(ConflictToJSON)),
        'type': value['type'],
    };
}


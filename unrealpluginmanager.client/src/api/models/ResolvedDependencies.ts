/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResolutionResult } from './ResolutionResult';
import {
    ResolutionResultFromJSON,
    ResolutionResultFromJSONTyped,
    ResolutionResultToJSON,
    ResolutionResultToJSONTyped,
} from './ResolutionResult';
import type { PluginSummary } from './PluginSummary';
import {
    PluginSummaryFromJSON,
    PluginSummaryFromJSONTyped,
    PluginSummaryToJSON,
    PluginSummaryToJSONTyped,
} from './PluginSummary';

/**
 * Represents a successful resolution of plugin dependencies within the Unreal Plugin Manager.
 * @export
 * @interface ResolvedDependencies
 */
export interface ResolvedDependencies extends ResolutionResult {
    /**
     * Gets or sets the list of plugins that have been successfully resolved during dependency resolution.
     * @type {Array<PluginSummary>}
     * @memberof ResolvedDependencies
     */
    selectedPlugins: Array<PluginSummary>;
    /**
     * 
     * @type {string}
     * @memberof ResolvedDependencies
     */
    readonly type: string;
}

/**
 * Check if a given object implements the ResolvedDependencies interface.
 */
export function instanceOfResolvedDependencies(value: object): value is ResolvedDependencies {
    if (!('selectedPlugins' in value) || value['selectedPlugins'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ResolvedDependenciesFromJSON(json: any): ResolvedDependencies {
    return ResolvedDependenciesFromJSONTyped(json, false);
}

export function ResolvedDependenciesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolvedDependencies {
    if (json == null) {
        return json;
    }
    return {
        ...ResolutionResultFromJSONTyped(json, true),
        'selectedPlugins': ((json['selectedPlugins'] as Array<any>).map(PluginSummaryFromJSON)),
        'type': json['type'],
    };
}

export function ResolvedDependenciesToJSON(json: any): ResolvedDependencies {
    return ResolvedDependenciesToJSONTyped(json, false);
}

export function ResolvedDependenciesToJSONTyped(value?: Omit<ResolvedDependencies, 'type'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...ResolutionResultToJSONTyped(value, true),
        'selectedPlugins': ((value['selectedPlugins'] as Array<any>).map(PluginSummaryToJSON)),
    };
}


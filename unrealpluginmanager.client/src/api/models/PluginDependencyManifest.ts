/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {PluginRepositorySource} from './PluginRepositorySource';
import {PluginRepositorySourceFromJSON, PluginRepositorySourceToJSON,} from './PluginRepositorySource';

/**
 * Represents the dependency manifest of a plugin, detailing the required plugin dependencies.
 * It includes information about the dependency's name, version constraints, and optional repository source.
 * @export
 * @interface PluginDependencyManifest
 */
export interface PluginDependencyManifest {
  /**
   * Gets or sets the name of the plugin dependency.
   * @type {string}
   * @memberof PluginDependencyManifest
   */
  name: string;
  /**
   * Gets or sets the version constraint of the plugin dependency.
   * Defines the acceptable range of versions required for the dependency.
   * @type {string}
   * @memberof PluginDependencyManifest
   */
  version?: string;
  /**
   *
   * @type {PluginRepositorySource}
   * @memberof PluginDependencyManifest
   */
  repositorySource?: PluginRepositorySource;
}

/**
 * Check if a given object implements the PluginDependencyManifest interface.
 */
export function instanceOfPluginDependencyManifest(value: object): value is PluginDependencyManifest {
  if (!('name' in value) || value['name'] === undefined) return false;
  return true;
}

export function PluginDependencyManifestFromJSON(json: any): PluginDependencyManifest {
  return PluginDependencyManifestFromJSONTyped(json, false);
}

export function PluginDependencyManifestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginDependencyManifest {
  if (json == null) {
    return json;
  }
  return {

    'name': json['name'],
    'version': json['version'] == null ? undefined : json['version'],
    'repositorySource': json['repositorySource'] == null ? undefined : PluginRepositorySourceFromJSON(json['repositorySource']),
  };
}

export function PluginDependencyManifestToJSON(json: any): PluginDependencyManifest {
  return PluginDependencyManifestToJSONTyped(json, false);
}

export function PluginDependencyManifestToJSONTyped(value?: PluginDependencyManifest | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {

    'name': value['name'],
    'version': value['version'],
    'repositorySource': PluginRepositorySourceToJSON(value['repositorySource']),
  };
}


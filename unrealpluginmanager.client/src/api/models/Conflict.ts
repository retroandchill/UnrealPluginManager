/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PluginRequirement } from './PluginRequirement';
import {
    PluginRequirementFromJSON,
    PluginRequirementFromJSONTyped,
    PluginRequirementToJSON,
    PluginRequirementToJSONTyped,
} from './PluginRequirement';

/**
 * Represents a conflict that occurs when multiple requirements specify incompatible
 * versions for the same plugin during resolution.
 * @export
 * @interface Conflict
 */
export interface Conflict {
    /**
     * 
     * @type {string}
     * @memberof Conflict
     */
    pluginName?: string;
    /**
     * 
     * @type {Array<PluginRequirement>}
     * @memberof Conflict
     */
    versions?: Array<PluginRequirement>;
}

/**
 * Check if a given object implements the Conflict interface.
 */
export function instanceOfConflict(value: object): value is Conflict {
    return true;
}

export function ConflictFromJSON(json: any): Conflict {
    return ConflictFromJSONTyped(json, false);
}

export function ConflictFromJSONTyped(json: any, ignoreDiscriminator: boolean): Conflict {
    if (json == null) {
        return json;
    }
    return {
        
        'pluginName': json['pluginName'] == null ? undefined : json['pluginName'],
        'versions': json['versions'] == null ? undefined : ((json['versions'] as Array<any>).map(PluginRequirementFromJSON)),
    };
}

export function ConflictToJSON(json: any): Conflict {
    return ConflictToJSONTyped(json, false);
}

export function ConflictToJSONTyped(value?: Conflict | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pluginName': value['pluginName'],
        'versions': value['versions'] == null ? undefined : ((value['versions'] as Array<any>).map(PluginRequirementToJSON)),
    };
}


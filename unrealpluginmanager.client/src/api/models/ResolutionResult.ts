/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { ConflictDetected, ConflictDetectedFromJSONTyped, ConflictDetectedToJSON, ConflictDetectedToJSONTyped } from './ConflictDetected';
import { ResolvedDependencies, ResolvedDependenciesFromJSONTyped, ResolvedDependenciesToJSON, ResolvedDependenciesToJSONTyped } from './ResolvedDependencies';
/**
 * Represents the result of a plugin resolution operation within the Unreal Plugin Manager.
 * @export
 * @interface ResolutionResult
 */
export interface ResolutionResult {
    /**
     * Gets the discriminator type used to identify the specific subclass of UnrealPluginManager.Core.Model.Resolution.ResolutionResult.
     * @type {string}
     * @memberof ResolutionResult
     */
    readonly type: string;
}

/**
 * Check if a given object implements the ResolutionResult interface.
 */
export function instanceOfResolutionResult(value: object): value is ResolutionResult {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ResolutionResultFromJSON(json: any): ResolutionResult {
    return ResolutionResultFromJSONTyped(json, false);
}

export function ResolutionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionResult {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'ConflictsDetected') {
            return ConflictDetectedFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'Resolved') {
            return ResolvedDependenciesFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function ResolutionResultToJSON(json: any): ResolutionResult {
    return ResolutionResultToJSONTyped(json, false);
}

export function ResolutionResultToJSONTyped(value?: Omit<ResolutionResult, 'type'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['type']) {
            case 'ConflictsDetected':
                return ConflictDetectedToJSONTyped(value as ConflictDetected, ignoreDiscriminator);
            case 'Resolved':
                return ResolvedDependenciesToJSONTyped(value as ResolvedDependencies, ignoreDiscriminator);
            default:
                throw new Error(`No variant of ResolutionResult exists with 'type=${value['type']}'`);
        }
    }

    return {
        
    };
}


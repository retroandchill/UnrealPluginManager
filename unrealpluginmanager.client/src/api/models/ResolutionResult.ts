/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ConflictDetected } from './ConflictDetected';
import {
    instanceOfConflictDetected,
    ConflictDetectedFromJSON,
    ConflictDetectedFromJSONTyped,
    ConflictDetectedToJSON,
} from './ConflictDetected';
import type { ResolvedDependencies } from './ResolvedDependencies';
import {
    instanceOfResolvedDependencies,
    ResolvedDependenciesFromJSON,
    ResolvedDependenciesFromJSONTyped,
    ResolvedDependenciesToJSON,
} from './ResolvedDependencies';

/**
 * @type ResolutionResult
 * Represents the result of a resolution process that determines the required
 * or conflicting plugins within a dependency chain.
 * @export
 */
export type ResolutionResult = ConflictDetected | ResolvedDependencies;

export function ResolutionResultFromJSON(json: any): ResolutionResult {
    return ResolutionResultFromJSONTyped(json, false);
}

export function ResolutionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionResult {
    if (json == null) {
        return json;
    }
    if (instanceOfConflictDetected(json)) {
        return ConflictDetectedFromJSONTyped(json, true);
    }
    if (instanceOfResolvedDependencies(json)) {
        return ResolvedDependenciesFromJSONTyped(json, true);
    }

    return {} as any;
}

export function ResolutionResultToJSON(json: any): any {
    return ResolutionResultToJSONTyped(json, false);
}

export function ResolutionResultToJSONTyped(value?: ResolutionResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfConflictDetected(value)) {
        return ConflictDetectedToJSON(value as ConflictDetected);
    }
    if (instanceOfResolvedDependencies(value)) {
        return ResolvedDependenciesToJSON(value as ResolvedDependencies);
    }

    return {};
}


/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DependencyManifest,
  PluginDependency,
  PluginDetails,
  PluginOverviewPage,
  PluginSummary,
  PluginVersionInfo,
  PluginVersionInfoPage,
} from '../models/index';
import {
    DependencyManifestFromJSON,
    DependencyManifestToJSON,
    PluginDependencyFromJSON,
    PluginDependencyToJSON,
    PluginDetailsFromJSON,
    PluginDetailsToJSON,
    PluginOverviewPageFromJSON,
    PluginOverviewPageToJSON,
    PluginSummaryFromJSON,
    PluginSummaryToJSON,
    PluginVersionInfoFromJSON,
    PluginVersionInfoToJSON,
    PluginVersionInfoPageFromJSON,
    PluginVersionInfoPageToJSON,
} from '../models/index';

export interface AddPluginRequest {
    engineVersion: string;
    pluginFile?: Blob;
}

export interface DownloadLatestPluginRequest {
    pluginId: string;
    engineVersion: string;
    targetVersion?: string;
    platforms?: Array<string>;
}

export interface DownloadPluginRequest {
    pluginId: string;
    versionId: string;
}

export interface DownloadPluginBinariesRequest {
    pluginId: string;
    versionId: string;
    engineVersion: string;
    platform: string;
}

export interface DownloadPluginSourceRequest {
    pluginId: string;
    versionId: string;
}

export interface DownloadPluginVersionRequest {
    pluginId: string;
    versionId: string;
    engineVersion: string;
    platforms?: Array<string>;
}

export interface GetCandidateDependenciesRequest {
    pluginDependency: Array<PluginDependency>;
}

export interface GetDependencyTreeRequest {
    pluginId: string;
    body?: string;
}

export interface GetLatestVersionRequest {
    pluginId: string;
    version?: string;
}

export interface GetLatestVersionsRequest {
    match?: string;
    versionRange?: string;
    page?: number;
    size?: number;
}

export interface GetPluginsRequest {
    match?: string;
    page?: number;
    size?: number;
}

export interface SubmitPluginRequest {
    submission?: Blob;
}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI {

    /**
     * Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
     */
    async addPluginRaw(requestParameters: AddPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginDetails>> {
        if (requestParameters['engineVersion'] == null) {
            throw new runtime.RequiredError(
                'engineVersion',
                'Required parameter "engineVersion" was null or undefined when calling addPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['pluginFile'] != null) {
            formParams.append('pluginFile', requestParameters['pluginFile'] as any);
        }

        const response = await this.request({
            path: `/api/plugins/{engineVersion}/submit`.replace(`{${"engineVersion"}}`, encodeURIComponent(String(requestParameters['engineVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginDetailsFromJSON(jsonValue));
    }

    /**
     * Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
     */
    async addPlugin(requestParameters: AddPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginDetails> {
        const response = await this.addPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads a plugin file as a ZIP archive for the specified plugin, engine version, and target platforms.
     */
    async downloadLatestPluginRaw(requestParameters: DownloadLatestPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling downloadLatestPlugin().'
            );
        }

        if (requestParameters['engineVersion'] == null) {
            throw new runtime.RequiredError(
                'engineVersion',
                'Required parameter "engineVersion" was null or undefined when calling downloadLatestPlugin().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['targetVersion'] != null) {
            queryParameters['targetVersion'] = requestParameters['targetVersion'];
        }

        if (requestParameters['platforms'] != null) {
            queryParameters['platforms'] = requestParameters['platforms'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/latest/{engineVersion}/download`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))).replace(`{${"engineVersion"}}`, encodeURIComponent(String(requestParameters['engineVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads a plugin file as a ZIP archive for the specified plugin, engine version, and target platforms.
     */
    async downloadLatestPlugin(requestParameters: DownloadLatestPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadLatestPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the specified plugin version as a zip file.
     */
    async downloadPluginRaw(requestParameters: DownloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling downloadPlugin().'
            );
        }

        if (requestParameters['versionId'] == null) {
            throw new runtime.RequiredError(
                'versionId',
                'Required parameter "versionId" was null or undefined when calling downloadPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/{versionId}/download`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters['versionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the specified plugin version as a zip file.
     */
    async downloadPlugin(requestParameters: DownloadPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the binary files of a specified plugin for a given version, engine version, and platform.
     */
    async downloadPluginBinariesRaw(requestParameters: DownloadPluginBinariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling downloadPluginBinaries().'
            );
        }

        if (requestParameters['versionId'] == null) {
            throw new runtime.RequiredError(
                'versionId',
                'Required parameter "versionId" was null or undefined when calling downloadPluginBinaries().'
            );
        }

        if (requestParameters['engineVersion'] == null) {
            throw new runtime.RequiredError(
                'engineVersion',
                'Required parameter "engineVersion" was null or undefined when calling downloadPluginBinaries().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling downloadPluginBinaries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/{versionId}/download/{engineVersion}/{platform}/binaries`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters['versionId']))).replace(`{${"engineVersion"}}`, encodeURIComponent(String(requestParameters['engineVersion']))).replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the binary files of a specified plugin for a given version, engine version, and platform.
     */
    async downloadPluginBinaries(requestParameters: DownloadPluginBinariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadPluginBinariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the source code of a specific plugin version as a zip file.
     */
    async downloadPluginSourceRaw(requestParameters: DownloadPluginSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling downloadPluginSource().'
            );
        }

        if (requestParameters['versionId'] == null) {
            throw new runtime.RequiredError(
                'versionId',
                'Required parameter "versionId" was null or undefined when calling downloadPluginSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/{versionId}/download/source`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters['versionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the source code of a specific plugin version as a zip file.
     */
    async downloadPluginSource(requestParameters: DownloadPluginSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadPluginSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the specified version of a plugin as a ZIP file for the specified Unreal Engine version and target platforms.
     */
    async downloadPluginVersionRaw(requestParameters: DownloadPluginVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling downloadPluginVersion().'
            );
        }

        if (requestParameters['versionId'] == null) {
            throw new runtime.RequiredError(
                'versionId',
                'Required parameter "versionId" was null or undefined when calling downloadPluginVersion().'
            );
        }

        if (requestParameters['engineVersion'] == null) {
            throw new runtime.RequiredError(
                'engineVersion',
                'Required parameter "engineVersion" was null or undefined when calling downloadPluginVersion().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['platforms'] != null) {
            queryParameters['platforms'] = requestParameters['platforms'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/{versionId}/download/{engineVersion}`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters['versionId']))).replace(`{${"engineVersion"}}`, encodeURIComponent(String(requestParameters['engineVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the specified version of a plugin as a ZIP file for the specified Unreal Engine version and target platforms.
     */
    async downloadPluginVersion(requestParameters: DownloadPluginVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadPluginVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a dependency manifest containing potential versions for the given list of plugin dependencies.
     */
    async getCandidateDependenciesRaw(requestParameters: GetCandidateDependenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DependencyManifest>> {
        if (requestParameters['pluginDependency'] == null) {
            throw new runtime.RequiredError(
                'pluginDependency',
                'Required parameter "pluginDependency" was null or undefined when calling getCandidateDependencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/plugins/dependencies/candidates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['pluginDependency']!.map(PluginDependencyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DependencyManifestFromJSON(jsonValue));
    }

    /**
     * Retrieves a dependency manifest containing potential versions for the given list of plugin dependencies.
     */
    async getCandidateDependencies(requestParameters: GetCandidateDependenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DependencyManifest> {
        const response = await this.getCandidateDependenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the dependency tree for a specified plugin.
     */
    async getDependencyTreeRaw(requestParameters: GetDependencyTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PluginSummary>>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling getDependencyTree().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/plugins/{pluginId}/latest/dependencies`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PluginSummaryFromJSON));
    }

    /**
     * Retrieves the dependency tree for a specified plugin.
     */
    async getDependencyTree(requestParameters: GetDependencyTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PluginSummary>> {
        const response = await this.getDependencyTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves detailed information about the latest version of the specified plugin,  optionally constrained by a version range.
     */
    async getLatestVersionRaw(requestParameters: GetLatestVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginVersionInfo>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling getLatestVersion().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginId}/latest`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters['pluginId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginVersionInfoFromJSON(jsonValue));
    }

    /**
     * Retrieves detailed information about the latest version of the specified plugin,  optionally constrained by a version range.
     */
    async getLatestVersion(requestParameters: GetLatestVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginVersionInfo> {
        const response = await this.getLatestVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of the latest plugin versions filtered by the specified criteria.
     */
    async getLatestVersionsRaw(requestParameters: GetLatestVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginVersionInfoPage>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        if (requestParameters['versionRange'] != null) {
            queryParameters['versionRange'] = requestParameters['versionRange'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginVersionInfoPageFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of the latest plugin versions filtered by the specified criteria.
     */
    async getLatestVersions(requestParameters: GetLatestVersionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginVersionInfoPage> {
        const response = await this.getLatestVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
     */
    async getPluginsRaw(requestParameters: GetPluginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginOverviewPage>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginOverviewPageFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
     */
    async getPlugins(requestParameters: GetPluginsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginOverviewPage> {
        const response = await this.getPluginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submits a plugin for processing by uploading source code and a collection of binaries.
     */
    async submitPluginRaw(requestParameters: SubmitPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['submission'] != null) {
            formParams.append('submission', requestParameters['submission'] as any);
        }

        const response = await this.request({
            path: `/api/plugins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginDetailsFromJSON(jsonValue));
    }

    /**
     * Submits a plugin for processing by uploading source code and a collection of binaries.
     */
    async submitPlugin(requestParameters: SubmitPluginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginDetails> {
        const response = await this.submitPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

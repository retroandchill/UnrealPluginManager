/* tslint:disable */
/* eslint-disable */
/**
 * UnrealPluginManager.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PluginDetails,
  PluginOverviewPage,
  PluginSummary,
} from '../models/index';
import {
    PluginDetailsFromJSON,
    PluginDetailsToJSON,
    PluginOverviewPageFromJSON,
    PluginOverviewPageToJSON,
    PluginSummaryFromJSON,
    PluginSummaryToJSON,
} from '../models/index';

export interface ApiPluginsGetRequest {
    match?: string;
    page?: number;
    size?: number;
}

export interface ApiPluginsPluginNameDownloadGetRequest {
    pluginName: string;
    engineVersion?: string;
}

export interface ApiPluginsPluginNameGetRequest {
    pluginName: string;
}

export interface ApiPluginsPostRequest {
    engineVersion?: string;
    pluginFile?: Blob;
}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI {

    /**
     * Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
     */
    async apiPluginsGetRaw(requestParameters: ApiPluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginOverviewPage>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginOverviewPageFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
     */
    async apiPluginsGet(requestParameters: ApiPluginsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginOverviewPage> {
        const response = await this.apiPluginsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
     */
    async apiPluginsPluginNameDownloadGetRaw(requestParameters: ApiPluginsPluginNameDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['pluginName'] == null) {
            throw new runtime.RequiredError(
                'pluginName',
                'Required parameter "pluginName" was null or undefined when calling apiPluginsPluginNameDownloadGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['engineVersion'] != null) {
            queryParameters['engineVersion'] = requestParameters['engineVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginName}/download`.replace(`{${"pluginName"}}`, encodeURIComponent(String(requestParameters['pluginName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
     */
    async apiPluginsPluginNameDownloadGet(requestParameters: ApiPluginsPluginNameDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiPluginsPluginNameDownloadGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the dependency tree for a specified plugin.
     */
    async apiPluginsPluginNameGetRaw(requestParameters: ApiPluginsPluginNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PluginSummary>>> {
        if (requestParameters['pluginName'] == null) {
            throw new runtime.RequiredError(
                'pluginName',
                'Required parameter "pluginName" was null or undefined when calling apiPluginsPluginNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plugins/{pluginName}`.replace(`{${"pluginName"}}`, encodeURIComponent(String(requestParameters['pluginName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PluginSummaryFromJSON));
    }

    /**
     * Retrieves the dependency tree for a specified plugin.
     */
    async apiPluginsPluginNameGet(requestParameters: ApiPluginsPluginNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PluginSummary>> {
        const response = await this.apiPluginsPluginNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
     */
    async apiPluginsPostRaw(requestParameters: ApiPluginsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginDetails>> {
        const queryParameters: any = {};

        if (requestParameters['engineVersion'] != null) {
            queryParameters['engineVersion'] = requestParameters['engineVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['pluginFile'] != null) {
            formParams.append('pluginFile', requestParameters['pluginFile'] as any);
        }

        const response = await this.request({
            path: `/api/plugins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginDetailsFromJSON(jsonValue));
    }

    /**
     * Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
     */
    async apiPluginsPost(requestParameters: ApiPluginsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginDetails> {
        const response = await this.apiPluginsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
//@ts-nocheck
/**
 * Unreal Plugin Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {ApiKeyOverview, UserOverview,} from '../models/index';
import {ApiKeyOverviewToJSON, UserOverviewFromJSON,} from '../models/index';

export interface CreateApiKeyRequest {
    userId: string;
    apiKeyOverview?: ApiKeyOverview;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/users/{userId}/api-keys`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyOverviewToJSON(requestParameters['apiKeyOverview']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createApiKey(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActiveUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOverview>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

      if (this.configuration && this.configuration.accessToken) {
        // oauth required
        headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
      }

        const response = await this.request({
            path: `/users/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOverviewFromJSON(jsonValue));
    }

    /**
     */
    async getActiveUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOverview> {
        const response = await this.getActiveUserRaw(initOverrides);
        return await response.value();
    }

}

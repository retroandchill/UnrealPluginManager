/*
 * UnrealPluginManager.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using UnrealPluginManager.WebClient.Client;
using UnrealPluginManager.Core.Pagination;
using UnrealPluginManager.Core.Model.Plugins;

using UnrealPluginManager.WebClient.Model;

namespace UnrealPluginManager.WebClient.Api
{
    using PluginOverviewPage = Page<PluginOverview>;    


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginDetails</returns>
        PluginDetails AddPlugin(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginDetails</returns>
        ApiResponse<PluginDetails> AddPluginWithHttpInfo(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadPlugin(string pluginName, string? engineVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadPluginWithHttpInfo(string pluginName, string? engineVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves the dependency tree for a specified plugin.
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PluginSummary&gt;</returns>
        List<PluginSummary> GetDependencyTree(string pluginName, int operationIndex = 0);

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PluginSummary&gt;</returns>
        ApiResponse<List<PluginSummary>> GetDependencyTreeWithHttpInfo(string pluginName, int operationIndex = 0);
        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginOverviewPage</returns>
        PluginOverviewPage GetPlugins(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginOverviewPage</returns>
        ApiResponse<PluginOverviewPage> GetPluginsWithHttpInfo(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginDetails</returns>
        System.Threading.Tasks.Task<PluginDetails> AddPluginAsync(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginDetails>> AddPluginWithHttpInfoAsync(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadPluginAsync(string pluginName, string? engineVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadPluginWithHttpInfoAsync(string pluginName, string? engineVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the dependency tree for a specified plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PluginSummary&gt;</returns>
        System.Threading.Tasks.Task<List<PluginSummary>> GetDependencyTreeAsync(string pluginName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PluginSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PluginSummary>>> GetDependencyTreeWithHttpInfoAsync(string pluginName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginOverviewPage</returns>
        System.Threading.Tasks.Task<PluginOverviewPage> GetPluginsAsync(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginOverviewPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginOverviewPage>> GetPluginsWithHttpInfoAsync(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IPluginsApiSync, IPluginsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private UnrealPluginManager.WebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(string basePath)
        {
            this.Configuration = UnrealPluginManager.WebClient.Client.Configuration.MergeConfigurations(
                UnrealPluginManager.WebClient.Client.GlobalConfiguration.Instance,
                new UnrealPluginManager.WebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new UnrealPluginManager.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new UnrealPluginManager.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = UnrealPluginManager.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(UnrealPluginManager.WebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = UnrealPluginManager.WebClient.Client.Configuration.MergeConfigurations(
                UnrealPluginManager.WebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new UnrealPluginManager.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new UnrealPluginManager.WebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = UnrealPluginManager.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PluginsApi(UnrealPluginManager.WebClient.Client.ISynchronousClient client, UnrealPluginManager.WebClient.Client.IAsynchronousClient asyncClient, UnrealPluginManager.WebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = UnrealPluginManager.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public UnrealPluginManager.WebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public UnrealPluginManager.WebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UnrealPluginManager.WebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UnrealPluginManager.WebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginDetails</returns>
        public PluginDetails AddPlugin(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<PluginDetails> localVarResponse = AddPluginWithHttpInfo(engineVersion, pluginFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginDetails</returns>
        public UnrealPluginManager.WebClient.Client.ApiResponse<PluginDetails> AddPluginWithHttpInfo(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (engineVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "engineVersion", engineVersion));
            }
            if (pluginFile != null)
            {
                localVarRequestOptions.FileParameters.Add("pluginFile", pluginFile);
            }

            localVarRequestOptions.Operation = "PluginsApi.AddPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PluginDetails>("/api/plugins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginDetails</returns>
        public async System.Threading.Tasks.Task<PluginDetails> AddPluginAsync(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<PluginDetails> localVarResponse = await AddPluginWithHttpInfoAsync(engineVersion, pluginFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a plugin by uploading a plugin file and specifying the target Unreal Engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineVersion">The target Unreal Engine version for which the plugin is being added. (optional)</param>
        /// <param name="pluginFile">The uploaded plugin file in a valid format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginDetails)</returns>
        public async System.Threading.Tasks.Task<UnrealPluginManager.WebClient.Client.ApiResponse<PluginDetails>> AddPluginWithHttpInfoAsync(string? engineVersion = default(string?), System.IO.Stream? pluginFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (engineVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "engineVersion", engineVersion));
            }
            if (pluginFile != null)
            {
                localVarRequestOptions.FileParameters.Add("pluginFile", pluginFile);
            }

            localVarRequestOptions.Operation = "PluginsApi.AddPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PluginDetails>("/api/plugins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadPlugin(string pluginName, string? engineVersion = default(string?), int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadPluginWithHttpInfo(pluginName, engineVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public UnrealPluginManager.WebClient.Client.ApiResponse<System.IO.Stream> DownloadPluginWithHttpInfo(string pluginName, string? engineVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'pluginName' is set
            if (pluginName == null)
            {
                throw new UnrealPluginManager.WebClient.Client.ApiException(400, "Missing required parameter 'pluginName' when calling PluginsApi->DownloadPlugin");
            }

            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pluginName", UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToString(pluginName)); // path parameter
            if (engineVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "engineVersion", engineVersion));
            }

            localVarRequestOptions.Operation = "PluginsApi.DownloadPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/plugins/{pluginName}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadPluginAsync(string pluginName, string? engineVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadPluginWithHttpInfoAsync(pluginName, engineVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads a plugin file as a ZIP archive for the specified plugin and engine version. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin to be downloaded.</param>
        /// <param name="engineVersion">The Unreal Engine version for which the plugin file is requested. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<UnrealPluginManager.WebClient.Client.ApiResponse<System.IO.Stream>> DownloadPluginWithHttpInfoAsync(string pluginName, string? engineVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginName' is set
            if (pluginName == null)
            {
                throw new UnrealPluginManager.WebClient.Client.ApiException(400, "Missing required parameter 'pluginName' when calling PluginsApi->DownloadPlugin");
            }


            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pluginName", UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToString(pluginName)); // path parameter
            if (engineVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "engineVersion", engineVersion));
            }

            localVarRequestOptions.Operation = "PluginsApi.DownloadPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/plugins/{pluginName}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PluginSummary&gt;</returns>
        public List<PluginSummary> GetDependencyTree(string pluginName, int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<List<PluginSummary>> localVarResponse = GetDependencyTreeWithHttpInfo(pluginName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PluginSummary&gt;</returns>
        public UnrealPluginManager.WebClient.Client.ApiResponse<List<PluginSummary>> GetDependencyTreeWithHttpInfo(string pluginName, int operationIndex = 0)
        {
            // verify the required parameter 'pluginName' is set
            if (pluginName == null)
            {
                throw new UnrealPluginManager.WebClient.Client.ApiException(400, "Missing required parameter 'pluginName' when calling PluginsApi->GetDependencyTree");
            }

            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pluginName", UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToString(pluginName)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetDependencyTree";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PluginSummary>>("/api/plugins/{pluginName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDependencyTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PluginSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<PluginSummary>> GetDependencyTreeAsync(string pluginName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<List<PluginSummary>> localVarResponse = await GetDependencyTreeWithHttpInfoAsync(pluginName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the dependency tree for a specified plugin. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginName">The name of the plugin whose dependency tree is to be retrieved.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PluginSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<UnrealPluginManager.WebClient.Client.ApiResponse<List<PluginSummary>>> GetDependencyTreeWithHttpInfoAsync(string pluginName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginName' is set
            if (pluginName == null)
            {
                throw new UnrealPluginManager.WebClient.Client.ApiException(400, "Missing required parameter 'pluginName' when calling PluginsApi->GetDependencyTree");
            }


            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pluginName", UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToString(pluginName)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetDependencyTree";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PluginSummary>>("/api/plugins/{pluginName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDependencyTree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginOverviewPage</returns>
        public PluginOverviewPage GetPlugins(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<PluginOverviewPage> localVarResponse = GetPluginsWithHttpInfo(match, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginOverviewPage</returns>
        public UnrealPluginManager.WebClient.Client.ApiResponse<PluginOverviewPage> GetPluginsWithHttpInfo(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0)
        {
            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (match != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "match", match));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PluginsApi.GetPlugins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PluginOverviewPage>("/api/plugins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlugins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginOverviewPage</returns>
        public async System.Threading.Tasks.Task<PluginOverviewPage> GetPluginsAsync(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            UnrealPluginManager.WebClient.Client.ApiResponse<PluginOverviewPage> localVarResponse = await GetPluginsWithHttpInfoAsync(match, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a paginated list of plugin overviews based on the specified filter and pagination settings. 
        /// </summary>
        /// <exception cref="UnrealPluginManager.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="match">A wildcard string used to filtered plugins by name. Defaults to \&quot;*\&quot;. (optional, default to &quot;*&quot;)</param>
        /// <param name="page">The page number to retrieve. (optional, default to 1)</param>
        /// <param name="size">The number of items to retrieve per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginOverviewPage)</returns>
        public async System.Threading.Tasks.Task<UnrealPluginManager.WebClient.Client.ApiResponse<PluginOverviewPage>> GetPluginsWithHttpInfoAsync(string? match = default(string?), int? page = default(int?), int? size = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            UnrealPluginManager.WebClient.Client.RequestOptions localVarRequestOptions = new UnrealPluginManager.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = UnrealPluginManager.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (match != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "match", match));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(UnrealPluginManager.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PluginsApi.GetPlugins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PluginOverviewPage>("/api/plugins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlugins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

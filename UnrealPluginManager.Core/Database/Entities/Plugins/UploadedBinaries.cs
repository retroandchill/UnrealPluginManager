using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO.Abstractions;
using Microsoft.EntityFrameworkCore;

namespace UnrealPluginManager.Core.Database.Entities.Plugins;

/// <summary>
/// Represents a binary file associated with an Unreal Plugin version, stored in the database.
/// </summary>
/// <remarks>
/// This class provides a way to associate binary files with a specific plugin version,
/// targeting a particular platform and engine version. The file path of the binary is stored
/// as an <see cref="IFileInfo"/>, allowing for filesystem interactions while maintaining abstraction.
/// The entity is defined with metadata constraints and includes relationships to its parent plugin version.
/// </remarks>
/// <remarks>
/// Database relationships and constraints:
/// - Each binary is associated with a parent plugin version, defined via <see cref="ParentId"/>.
/// - The <see cref="Parent"/> property establishes a navigation link to its parent entity.
/// - The entity maintains a required and unique-to-parent mapping of platform and engine version.
/// </remarks>
/// <remarks>
/// The <see cref="DefineModelMetadata"/> method is used to define the database schema for this entity, including:
/// - Relationships: One-to-many association with PluginVersion.
/// - File path representation: Converts <see cref="IFileInfo"/> to and from its full path string.
/// - Indexes: Includes database indexes on ParentId and EngineVersion for fast lookup.
/// </remarks>
public class UploadedBinaries : IVersionedEntityChild {
    /// <summary>
    /// Represents the unique identifier for the plugin binary entry in the database.
    /// Automatically generated by the database upon creation of a new record.
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public ulong Id { get; set; }

    /// <summary>
    /// Refers to the unique identifier of the parent entity associated with the plugin binary record in the database.
    /// Required for establishing hierarchical relationships between plugin entities.
    /// </summary>
    [Required]
    public ulong ParentId { get; set; }

    /// <summary>
    /// Represents the parent plugin version associated with the plugin binary entry.
    /// Indicates the version relationship for organizing and managing plugin binaries effectively.
    /// </summary>
    public PluginVersion Parent { get; set; }
    
    IVersionedEntity IVersionedEntityChild.Parent => Parent;

    /// <summary>
    /// Specifies the platform that the plugin binary is compatible with.
    /// This value must be a non-empty string with a maximum length of 255 characters.
    /// </summary>
    [Required]
    [MinLength(1)]
    [MaxLength(255)]
    public required string Platform { get; set; }

    /// <summary>
    /// Specifies the version of the Unreal Engine that the plugin binary is compatible with.
    /// This property is required and ensures compatibility information is associated with the plugin binary.
    /// </summary>
    [Required]
    [MinLength(1)]
    [MaxLength(255)]
    public required string EngineVersion { get; set; }
    
    internal static void DefineModelMetadata(ModelBuilder modelBuilder) {
        modelBuilder.Entity<UploadedBinaries>()
            .HasOne(x => x.Parent)
            .WithMany(x => x.Binaries)
            .HasForeignKey(x => x.ParentId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<UploadedBinaries>()
            .HasIndex(x => x.ParentId);

        modelBuilder.Entity<UploadedBinaries>()
            .HasIndex(x => new {x.EngineVersion, x.Platform})
            .IsUnique();
    }
}
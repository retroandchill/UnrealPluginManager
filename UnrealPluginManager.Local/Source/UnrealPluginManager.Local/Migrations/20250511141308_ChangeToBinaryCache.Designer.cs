// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnrealPluginManager.Local.Database;

#nullable disable

namespace UnrealPluginManager.Local.Migrations
{
    [DbContext(typeof(LocalUnrealPluginManagerContext))]
    [Migration("20250511141308_ChangeToBinaryCache")]
    partial class ChangeToBinaryCache
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_id");

                    b.Property<string>("PluginName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("plugin_name");

                    b.Property<string>("PluginVersion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("plugin_version");

                    b.HasKey("Id")
                        .HasName("pk_dependency");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_dependency_parent_id");

                    b.ToTable("dependency", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_plugins");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_plugins_name");

                    b.ToTable("plugins", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Homepage")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("homepage");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("TEXT")
                        .HasColumnName("icon_id");

                    b.Property<string>("License")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("license");

                    b.Property<int>("Major")
                        .HasColumnType("INTEGER")
                        .HasColumnName("major");

                    b.Property<string>("Metadata")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("metadata");

                    b.Property<int>("Minor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("minor");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("parent_id");

                    b.Property<int>("Patch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patch");

                    b.Property<string>("Prerelease")
                        .HasColumnType("TEXT")
                        .HasColumnName("prerelease");

                    b.Property<int?>("PrereleaseNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prerelease_number");

                    b.Property<Guid?>("ReadmeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("readme_id");

                    b.Property<string>("VersionString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("version_string");

                    b.ComplexProperty<Dictionary<string, object>>("Source", "UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion.Source#SourceLocation", b1 =>
                        {
                            b1.Property<string>("Sha")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("source_sha");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("source_url");
                        });

                    b.HasKey("Id")
                        .HasName("pk_plugin_versions");

                    b.HasIndex("IconId")
                        .HasDatabaseName("ix_plugin_versions_icon_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_plugin_versions_parent_id");

                    b.HasIndex("ReadmeId")
                        .HasDatabaseName("ix_plugin_versions_readme_id");

                    b.ToTable("plugin_versions", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("original_filename");

                    b.Property<string>("StoredFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("stored_filename");

                    b.HasKey("Id")
                        .HasName("pk_file_resources");

                    b.ToTable("file_resources", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.DependencyBuildVersion", b =>
                {
                    b.Property<Guid>("BuildId")
                        .HasColumnType("TEXT")
                        .HasColumnName("build_id");

                    b.Property<Guid>("DependencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("dependency_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("version");

                    b.HasKey("BuildId", "DependencyId")
                        .HasName("pk_dependency_build_version");

                    b.HasIndex("DependencyId")
                        .HasDatabaseName("ix_dependency_build_version_dependency_id");

                    b.ToTable("dependency_build_version", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.PluginBuild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("BuiltOn")
                        .HasColumnType("TEXT")
                        .HasColumnName("built_on");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("directory_name");

                    b.Property<string>("EngineVersion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("engine_version");

                    b.Property<Guid>("PluginVersionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("plugin_version_id");

                    b.HasKey("Id")
                        .HasName("pk_plugin_build");

                    b.HasIndex("PluginVersionId")
                        .HasDatabaseName("ix_plugin_build_plugin_version_id");

                    b.ToTable("plugin_build", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.PluginBuildPlatform", b =>
                {
                    b.Property<Guid>("BuildId")
                        .HasColumnType("TEXT")
                        .HasColumnName("build_id");

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT")
                        .HasColumnName("platform");

                    b.HasKey("BuildId", "Platform")
                        .HasName("pk_plugin_build_platform");

                    b.ToTable("plugin_build_platform", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Dependency", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", "Parent")
                        .WithMany("Dependencies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependency_plugin_versions_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_plugin_versions_file_resources_icon_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", "Parent")
                        .WithMany("Versions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_versions_plugins_parent_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "Readme")
                        .WithMany()
                        .HasForeignKey("ReadmeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_plugin_versions_file_resources_readme_id");

                    b.Navigation("Icon");

                    b.Navigation("Parent");

                    b.Navigation("Readme");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.DependencyBuildVersion", b =>
                {
                    b.HasOne("UnrealPluginManager.Server.Database.Building.PluginBuild", "Build")
                        .WithMany("BuiltWith")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependency_build_version_plugin_build_build_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependency_build_version_dependency_dependency_id");

                    b.Navigation("Build");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.PluginBuild", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", "PluginVersion")
                        .WithMany()
                        .HasForeignKey("PluginVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_build_plugin_versions_plugin_version_id");

                    b.Navigation("PluginVersion");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.PluginBuildPlatform", b =>
                {
                    b.HasOne("UnrealPluginManager.Server.Database.Building.PluginBuild", "Build")
                        .WithMany("Platforms")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_build_platform_plugin_build_build_id");

                    b.Navigation("Build");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Building.PluginBuild", b =>
                {
                    b.Navigation("BuiltWith");

                    b.Navigation("Platforms");
                });
#pragma warning restore 612, 618
        }
    }
}

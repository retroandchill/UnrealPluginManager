// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UnrealPluginManager.Server.Database;

#nullable disable

namespace UnrealPluginManager.Server.Migrations
{
    [DbContext(typeof(CloudUnrealPluginManagerContext))]
    partial class CloudUnrealPluginManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("PluginName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("plugin_name");

                    b.Property<string>("PluginVersion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("plugin_version");

                    b.HasKey("Id")
                        .HasName("pk_dependency");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_dependency_parent_id");

                    b.ToTable("dependency", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_plugins");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_plugins_name");

                    b.ToTable("plugins", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginSourcePatch", b =>
                {
                    b.Property<Guid>("PluginVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("plugin_version_id");

                    b.Property<long>("PatchNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("patch_number");

                    b.Property<Guid>("FileResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_resource_id");

                    b.HasKey("PluginVersionId", "PatchNumber")
                        .HasName("pk_plugin_source_patches");

                    b.HasIndex("FileResourceId")
                        .HasDatabaseName("ix_plugin_source_patches_file_resource_id");

                    b.ToTable("plugin_source_patches", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Homepage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("homepage");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uuid")
                        .HasColumnName("icon_id");

                    b.Property<string>("License")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("license");

                    b.Property<int>("Major")
                        .HasColumnType("integer")
                        .HasColumnName("major");

                    b.Property<string>("Metadata")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("metadata");

                    b.Property<int>("Minor")
                        .HasColumnType("integer")
                        .HasColumnName("minor");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Patch")
                        .HasColumnType("integer")
                        .HasColumnName("patch");

                    b.Property<string>("Prerelease")
                        .HasColumnType("text")
                        .HasColumnName("prerelease");

                    b.Property<int?>("PrereleaseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("prerelease_number");

                    b.Property<Guid?>("ReadmeId")
                        .HasColumnType("uuid")
                        .HasColumnName("readme_id");

                    b.Property<string>("VersionString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version_string");

                    b.ComplexProperty<Dictionary<string, object>>("Source", "UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion.Source#SourceLocation", b1 =>
                        {
                            b1.Property<string>("Sha")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("source_sha");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("source_url");
                        });

                    b.HasKey("Id")
                        .HasName("pk_plugin_versions");

                    b.HasIndex("IconId")
                        .HasDatabaseName("ix_plugin_versions_icon_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_plugin_versions_parent_id");

                    b.HasIndex("ReadmeId")
                        .HasDatabaseName("ix_plugin_versions_readme_id");

                    b.ToTable("plugin_versions", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_filename");

                    b.Property<string>("StoredFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stored_filename");

                    b.HasKey("Id")
                        .HasName("pk_file_resources");

                    b.ToTable("file_resources", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.AllowedPlugin", b =>
                {
                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uuid")
                        .HasColumnName("api_key_id");

                    b.Property<Guid>("PluginId")
                        .HasColumnType("uuid")
                        .HasColumnName("plugin_id");

                    b.HasKey("ApiKeyId", "PluginId")
                        .HasName("pk_allowed_plugins");

                    b.HasIndex("PluginId")
                        .HasDatabaseName("ix_allowed_plugins_plugin_id");

                    b.ToTable("allowed_plugins", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("PluginGlob")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("plugin_glob");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_api_keys");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_api_keys_external_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_api_keys_user_id");

                    b.ToTable("api_keys", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.PluginOwner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("PluginId")
                        .HasColumnType("uuid")
                        .HasColumnName("plugin_id");

                    b.HasKey("OwnerId", "PluginId")
                        .HasName("pk_plugin_owners");

                    b.HasIndex("PluginId")
                        .HasDatabaseName("ix_plugin_owners_plugin_id");

                    b.ToTable("plugin_owners", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("password");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_picture_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ProfilePictureId")
                        .HasDatabaseName("ix_users_profile_picture_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Dependency", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", "Parent")
                        .WithMany("Dependencies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependency_plugin_versions_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginSourcePatch", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "FileResource")
                        .WithMany()
                        .HasForeignKey("FileResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_source_patches_file_resources_file_resource_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", "PluginVersion")
                        .WithMany("Patches")
                        .HasForeignKey("PluginVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_source_patches_plugin_versions_plugin_version_id");

                    b.Navigation("FileResource");

                    b.Navigation("PluginVersion");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_plugin_versions_file_resources_icon_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", "Parent")
                        .WithMany("Versions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_versions_plugins_parent_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "Readme")
                        .WithMany()
                        .HasForeignKey("ReadmeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_plugin_versions_file_resources_readme_id");

                    b.Navigation("Icon");

                    b.Navigation("Parent");

                    b.Navigation("Readme");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.AllowedPlugin", b =>
                {
                    b.HasOne("UnrealPluginManager.Server.Database.Users.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allowed_plugins_api_keys_api_key_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allowed_plugins_plugins_plugin_id");

                    b.Navigation("ApiKey");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.ApiKey", b =>
                {
                    b.HasOne("UnrealPluginManager.Server.Database.Users.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_keys_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.PluginOwner", b =>
                {
                    b.HasOne("UnrealPluginManager.Server.Database.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_owners_users_owner_id");

                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plugin_owners_plugins_plugin_id");

                    b.Navigation("Owner");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.User", b =>
                {
                    b.HasOne("UnrealPluginManager.Core.Database.Entities.Storage.FileResource", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_users_file_resources_profile_picture_id");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.Plugin", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("UnrealPluginManager.Core.Database.Entities.Plugins.PluginVersion", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("Patches");
                });

            modelBuilder.Entity("UnrealPluginManager.Server.Database.Users.User", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
